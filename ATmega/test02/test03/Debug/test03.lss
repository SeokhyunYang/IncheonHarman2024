
test03.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000400  00000494  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000400  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800110  00800110  000004a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c50  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d5  00000000  00000000  000011c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000055b  00000000  00000000  00001b9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000134  00000000  00000000  000020f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000046c  00000000  00000000  0000222c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000055c  00000000  00000000  00002698  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002bf4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	84 c1       	rjmp	.+776    	; 0x31e <__vector_5>
  16:	00 00       	nop
  18:	a1 c1       	rjmp	.+834    	; 0x35c <__vector_6>
  1a:	00 00       	nop
  1c:	b6 c1       	rjmp	.+876    	; 0x38a <__vector_7>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e0       	ldi	r30, 0x00	; 0
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 31       	cpi	r26, 0x1B	; 27
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	bc d0       	rcall	.+376    	; 0x23c <main>
  c4:	9b c1       	rjmp	.+822    	; 0x3fc <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <seg>:
//   Pin Assign   : PDx - Segment image, PCx - Module select
//	DDRD = 0xFF;		// 세그먼트 제어 핀 8개를 출력으로 설정
//	DDRC = 0x0F;		// 자릿수 선택 핀 4개를 출력으로 설정
void seg(int sel, uint8_t c)
{
	PORTC |= 0x0F;
  c8:	25 b3       	in	r18, 0x15	; 21
  ca:	2f 60       	ori	r18, 0x0F	; 15
  cc:	25 bb       	out	0x15, r18	; 21
	PORTC &= (1 << (3-sel));
  ce:	45 b3       	in	r20, 0x15	; 21
  d0:	23 e0       	ldi	r18, 0x03	; 3
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	28 1b       	sub	r18, r24
  d6:	39 0b       	sbc	r19, r25
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <seg+0x1a>
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	2a 95       	dec	r18
  e4:	e2 f7       	brpl	.-8      	; 0xde <seg+0x16>
  e6:	84 23       	and	r24, r20
  e8:	85 bb       	out	0x15, r24	; 21
	PORTD = ~c;		// 숫자 데이터 출력
  ea:	60 95       	com	r22
  ec:	62 bb       	out	0x12, r22	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	8f e3       	ldi	r24, 0x3F	; 63
  f0:	9f e1       	ldi	r25, 0x1F	; 31
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <seg+0x2a>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <seg+0x30>
  f8:	00 00       	nop
  fa:	08 95       	ret

000000fc <FND_4>:
	_delay_ms(2);	// 0.002초 간격으로 전환
}

void FND_4(char *inf)	// Segment Image 배열
{
  fc:	0f 93       	push	r16
  fe:	1f 93       	push	r17
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	8c 01       	movw	r16, r24
	for(int i = 0; i < 4; i++)
 106:	c0 e0       	ldi	r28, 0x00	; 0
 108:	d0 e0       	ldi	r29, 0x00	; 0
 10a:	07 c0       	rjmp	.+14     	; 0x11a <FND_4+0x1e>
	{
		seg(i, *(inf+i));	// seg(i, inf[i]));
 10c:	f8 01       	movw	r30, r16
 10e:	ec 0f       	add	r30, r28
 110:	fd 1f       	adc	r31, r29
 112:	60 81       	ld	r22, Z
 114:	ce 01       	movw	r24, r28
 116:	d8 df       	rcall	.-80     	; 0xc8 <seg>
	_delay_ms(2);	// 0.002초 간격으로 전환
}

void FND_4(char *inf)	// Segment Image 배열
{
	for(int i = 0; i < 4; i++)
 118:	21 96       	adiw	r28, 0x01	; 1
 11a:	c4 30       	cpi	r28, 0x04	; 4
 11c:	d1 05       	cpc	r29, r1
 11e:	b4 f3       	brlt	.-20     	; 0x10c <FND_4+0x10>
 120:	8f e3       	ldi	r24, 0x3F	; 63
 122:	9f e1       	ldi	r25, 0x1F	; 31
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <FND_4+0x28>
 128:	00 c0       	rjmp	.+0      	; 0x12a <FND_4+0x2e>
 12a:	00 00       	nop
	{
		seg(i, *(inf+i));	// seg(i, inf[i]));
	}
	_delay_ms(2);
}
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	1f 91       	pop	r17
 132:	0f 91       	pop	r16
 134:	08 95       	ret

00000136 <Disp>:

char* Disp (unsigned long num)	// 10진 정수 ==> 문자열로 FND_4
{
 136:	4f 92       	push	r4
 138:	5f 92       	push	r5
 13a:	6f 92       	push	r6
 13c:	7f 92       	push	r7
 13e:	8f 92       	push	r8
 140:	9f 92       	push	r9
 142:	af 92       	push	r10
 144:	bf 92       	push	r11
 146:	cf 92       	push	r12
 148:	df 92       	push	r13
 14a:	ef 92       	push	r14
 14c:	ff 92       	push	r15
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	cd b7       	in	r28, 0x3d	; 61
 154:	de b7       	in	r29, 0x3e	; 62
 156:	28 97       	sbiw	r28, 0x08	; 8
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	f8 94       	cli
 15c:	de bf       	out	0x3e, r29	; 62
 15e:	0f be       	out	0x3f, r0	; 63
 160:	cd bf       	out	0x3d, r28	; 61
 162:	4b 01       	movw	r8, r22
 164:	5c 01       	movw	r10, r24
	// 10진 정수 계산
	int n4 = (num / 1000) % 10;	// D
 166:	28 ee       	ldi	r18, 0xE8	; 232
 168:	33 e0       	ldi	r19, 0x03	; 3
 16a:	40 e0       	ldi	r20, 0x00	; 0
 16c:	50 e0       	ldi	r21, 0x00	; 0
 16e:	24 d1       	rcall	.+584    	; 0x3b8 <__udivmodsi4>
 170:	0f 2e       	mov	r0, r31
 172:	fa e0       	ldi	r31, 0x0A	; 10
 174:	cf 2e       	mov	r12, r31
 176:	d1 2c       	mov	r13, r1
 178:	e1 2c       	mov	r14, r1
 17a:	f1 2c       	mov	r15, r1
 17c:	f0 2d       	mov	r31, r0
 17e:	ca 01       	movw	r24, r20
 180:	b9 01       	movw	r22, r18
 182:	a7 01       	movw	r20, r14
 184:	96 01       	movw	r18, r12
 186:	18 d1       	rcall	.+560    	; 0x3b8 <__udivmodsi4>
 188:	2b 01       	movw	r4, r22
 18a:	3c 01       	movw	r6, r24
	int n3 = (num / 100) % 10;	// C
 18c:	c5 01       	movw	r24, r10
 18e:	b4 01       	movw	r22, r8
 190:	24 e6       	ldi	r18, 0x64	; 100
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	40 e0       	ldi	r20, 0x00	; 0
 196:	50 e0       	ldi	r21, 0x00	; 0
 198:	0f d1       	rcall	.+542    	; 0x3b8 <__udivmodsi4>
 19a:	ca 01       	movw	r24, r20
 19c:	b9 01       	movw	r22, r18
 19e:	a7 01       	movw	r20, r14
 1a0:	96 01       	movw	r18, r12
 1a2:	0a d1       	rcall	.+532    	; 0x3b8 <__udivmodsi4>
 1a4:	69 83       	std	Y+1, r22	; 0x01
 1a6:	7a 83       	std	Y+2, r23	; 0x02
 1a8:	8b 83       	std	Y+3, r24	; 0x03
 1aa:	9c 83       	std	Y+4, r25	; 0x04
	int n2 = (num / 10) % 10;	// B
 1ac:	c5 01       	movw	r24, r10
 1ae:	b4 01       	movw	r22, r8
 1b0:	a7 01       	movw	r20, r14
 1b2:	96 01       	movw	r18, r12
 1b4:	01 d1       	rcall	.+514    	; 0x3b8 <__udivmodsi4>
 1b6:	6d 83       	std	Y+5, r22	; 0x05
 1b8:	7e 83       	std	Y+6, r23	; 0x06
 1ba:	8f 83       	std	Y+7, r24	; 0x07
 1bc:	98 87       	std	Y+8, r25	; 0x08
 1be:	ca 01       	movw	r24, r20
 1c0:	b9 01       	movw	r22, r18
 1c2:	a7 01       	movw	r20, r14
 1c4:	96 01       	movw	r18, r12
 1c6:	f8 d0       	rcall	.+496    	; 0x3b8 <__udivmodsi4>
	int n1 = num % 10;			// A
	
	// 문자열로 입력
	arr[0] = digit[n1];
 1c8:	ed 81       	ldd	r30, Y+5	; 0x05
 1ca:	fe 81       	ldd	r31, Y+6	; 0x06
 1cc:	e0 50       	subi	r30, 0x00	; 0
 1ce:	ff 4f       	sbci	r31, 0xFF	; 255
 1d0:	20 81       	ld	r18, Z
 1d2:	e6 e1       	ldi	r30, 0x16	; 22
 1d4:	f1 e0       	ldi	r31, 0x01	; 1
 1d6:	20 83       	st	Z, r18
	arr[1] = digit[n2];
 1d8:	db 01       	movw	r26, r22
 1da:	a0 50       	subi	r26, 0x00	; 0
 1dc:	bf 4f       	sbci	r27, 0xFF	; 255
 1de:	8c 91       	ld	r24, X
 1e0:	81 83       	std	Z+1, r24	; 0x01
	arr[2] = digit[n3] + 0x80;
 1e2:	a9 81       	ldd	r26, Y+1	; 0x01
 1e4:	ba 81       	ldd	r27, Y+2	; 0x02
 1e6:	a0 50       	subi	r26, 0x00	; 0
 1e8:	bf 4f       	sbci	r27, 0xFF	; 255
 1ea:	8c 91       	ld	r24, X
 1ec:	80 58       	subi	r24, 0x80	; 128
 1ee:	82 83       	std	Z+2, r24	; 0x02
	if (n4 == 0)	arr[3] = 0x00;		// n4 자릿수가 0이면 표시 안함
 1f0:	41 14       	cp	r4, r1
 1f2:	51 04       	cpc	r5, r1
 1f4:	19 f4       	brne	.+6      	; 0x1fc <Disp+0xc6>
 1f6:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <arr+0x3>
 1fa:	06 c0       	rjmp	.+12     	; 0x208 <Disp+0xd2>
	else			arr[3] = digit[n4];
 1fc:	f2 01       	movw	r30, r4
 1fe:	e0 50       	subi	r30, 0x00	; 0
 200:	ff 4f       	sbci	r31, 0xFF	; 255
 202:	80 81       	ld	r24, Z
 204:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <arr+0x3>
	
	FND_4(arr);
 208:	86 e1       	ldi	r24, 0x16	; 22
 20a:	91 e0       	ldi	r25, 0x01	; 1
 20c:	77 df       	rcall	.-274    	; 0xfc <FND_4>
	return arr;
}
 20e:	86 e1       	ldi	r24, 0x16	; 22
 210:	91 e0       	ldi	r25, 0x01	; 1
 212:	28 96       	adiw	r28, 0x08	; 8
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	f8 94       	cli
 218:	de bf       	out	0x3e, r29	; 62
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	cd bf       	out	0x3d, r28	; 61
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	ff 90       	pop	r15
 224:	ef 90       	pop	r14
 226:	df 90       	pop	r13
 228:	cf 90       	pop	r12
 22a:	bf 90       	pop	r11
 22c:	af 90       	pop	r10
 22e:	9f 90       	pop	r9
 230:	8f 90       	pop	r8
 232:	7f 90       	pop	r7
 234:	6f 90       	pop	r6
 236:	5f 90       	pop	r5
 238:	4f 90       	pop	r4
 23a:	08 95       	ret

0000023c <main>:
volatile int reset = 0;


int main(void)
{
	DDRD = 0xFF;		// 세그먼트 제어 핀 8개를 출력으로 설정
 23c:	8f ef       	ldi	r24, 0xFF	; 255
 23e:	81 bb       	out	0x11, r24	; 17
	DDRC = 0x0F;		// 자릿수 선택 핀 4개를 출력으로 설정
 240:	8f e0       	ldi	r24, 0x0F	; 15
 242:	84 bb       	out	0x14, r24	; 20
	DDRA = 0x01;		// LED1을 출력으로 설정
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	8a bb       	out	0x1a, r24	; 26
	DDRE = 0x00;		// 0000 0000, PE4~6=0
 248:	12 b8       	out	0x02, r1	; 2

	// Interrupt 사용 : INT4 ~ INT6 (Ext Int)
	//   Pin Assign   : PE4 ~ PE6
	
	// 인터럽트 설정
	EIMSK = 0x70;	// 0111 0000 - INT4~6 인터럽트 활성화
 24a:	80 e7       	ldi	r24, 0x70	; 112
 24c:	89 bf       	out	0x39, r24	; 57
	EICRB =	0x2A;	// 0010 1010  - INT4~6 하강 에지에서 인터럽트 발생
 24e:	8a e2       	ldi	r24, 0x2A	; 42
 250:	8a bf       	out	0x3a, r24	; 58
	SREG |= 0x80;	// Status Register - 인터럽트 허용
 252:	8f b7       	in	r24, 0x3f	; 63
 254:	80 68       	ori	r24, 0x80	; 128
 256:	8f bf       	out	0x3f, r24	; 63
	sei();			// set interrupt - 인터럽트 시작
 258:	78 94       	sei
volatile int timer = 0;
volatile int reset = 0;


int main(void)
{
 25a:	0f 2e       	mov	r0, r31
 25c:	f0 e1       	ldi	r31, 0x10	; 16
 25e:	ef 2e       	mov	r14, r31
 260:	f7 e2       	ldi	r31, 0x27	; 39
 262:	ff 2e       	mov	r15, r31
 264:	f0 2d       	mov	r31, r0
 266:	00 e0       	ldi	r16, 0x00	; 0
 268:	10 e0       	ldi	r17, 0x00	; 0
	
	int t = 0;
	int tstop = 10000;
    while (1) 
    {
		switch(state)
 26a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <state>
 26e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <state+0x1>
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	11 f4       	brne	.+4      	; 0x27a <main+0x3e>
		{
			case 0:	// counter stop
				break;
			case 1:	// counter start
				t++; break;
 276:	0f 5f       	subi	r16, 0xFF	; 255
 278:	1f 4f       	sbci	r17, 0xFF	; 255
			default: break;
		}
		Disp(t);
 27a:	b8 01       	movw	r22, r16
 27c:	01 2e       	mov	r0, r17
 27e:	00 0c       	add	r0, r0
 280:	88 0b       	sbc	r24, r24
 282:	99 0b       	sbc	r25, r25
 284:	58 df       	rcall	.-336    	; 0x136 <Disp>
		
		// 타이머 설정
		switch(timer)
 286:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <timer>
 28a:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <timer+0x1>
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	59 f4       	brne	.+22     	; 0x2a8 <main+0x6c>
		{
			case 0:
				break;
			case 1:{
				tstop = t;	// 현재 시간으로 타이머 설정
				state = 0;
 292:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <state+0x1>
 296:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <state>
				timer = 0;				
 29a:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <timer+0x1>
 29e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <timer>
		switch(timer)
		{
			case 0:
				break;
			case 1:{
				tstop = t;	// 현재 시간으로 타이머 설정
 2a2:	78 01       	movw	r14, r16
				state = 0;
				timer = 0;				
				t = 0;
 2a4:	00 e0       	ldi	r16, 0x00	; 0
 2a6:	10 e0       	ldi	r17, 0x00	; 0
				}
			default: break;
		}
		
		// 설정된 타이머 시간이 되면 LED 점멸
		if (t > tstop)
 2a8:	e0 16       	cp	r14, r16
 2aa:	f1 06       	cpc	r15, r17
 2ac:	24 f5       	brge	.+72     	; 0x2f6 <main+0xba>
		{
			PORTA |= 0x01;	// Port A의 0번째 bit를 HIGH(1)로 출력 - LED 켜기
 2ae:	8b b3       	in	r24, 0x1b	; 27
 2b0:	81 60       	ori	r24, 0x01	; 1
 2b2:	8b bb       	out	0x1b, r24	; 27
 2b4:	2f ef       	ldi	r18, 0xFF	; 255
 2b6:	89 e6       	ldi	r24, 0x69	; 105
 2b8:	98 e1       	ldi	r25, 0x18	; 24
 2ba:	21 50       	subi	r18, 0x01	; 1
 2bc:	80 40       	sbci	r24, 0x00	; 0
 2be:	90 40       	sbci	r25, 0x00	; 0
 2c0:	e1 f7       	brne	.-8      	; 0x2ba <main+0x7e>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <main+0x88>
 2c4:	00 00       	nop
			_delay_ms(500);
		
			PORTA &= ~0X01;	// Port A의 0번째 bit를 LOW(0)로 출력 - LED 끄기
 2c6:	8b b3       	in	r24, 0x1b	; 27
 2c8:	8e 7f       	andi	r24, 0xFE	; 254
 2ca:	8b bb       	out	0x1b, r24	; 27
			for(int i = 0; i < 25; i++)	// 타이머가 완료된 시간을 표시
 2cc:	c0 e0       	ldi	r28, 0x00	; 0
 2ce:	d0 e0       	ldi	r29, 0x00	; 0
 2d0:	0d c0       	rjmp	.+26     	; 0x2ec <main+0xb0>
			{
				Disp(t);
 2d2:	b8 01       	movw	r22, r16
 2d4:	01 2e       	mov	r0, r17
 2d6:	00 0c       	add	r0, r0
 2d8:	88 0b       	sbc	r24, r24
 2da:	99 0b       	sbc	r25, r25
 2dc:	2c df       	rcall	.-424    	; 0x136 <Disp>
 2de:	8f e3       	ldi	r24, 0x3F	; 63
 2e0:	9c e9       	ldi	r25, 0x9C	; 156
 2e2:	01 97       	sbiw	r24, 0x01	; 1
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <main+0xa6>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <main+0xac>
 2e8:	00 00       	nop
		{
			PORTA |= 0x01;	// Port A의 0번째 bit를 HIGH(1)로 출력 - LED 켜기
			_delay_ms(500);
		
			PORTA &= ~0X01;	// Port A의 0번째 bit를 LOW(0)로 출력 - LED 끄기
			for(int i = 0; i < 25; i++)	// 타이머가 완료된 시간을 표시
 2ea:	21 96       	adiw	r28, 0x01	; 1
 2ec:	c9 31       	cpi	r28, 0x19	; 25
 2ee:	d1 05       	cpc	r29, r1
 2f0:	84 f3       	brlt	.-32     	; 0x2d2 <main+0x96>
			{
				Disp(t);
				_delay_ms(10);
			}
			t--;
 2f2:	01 50       	subi	r16, 0x01	; 1
 2f4:	11 09       	sbc	r17, r1
		}
		
		// reset을 누르면 초기화
		if(reset)
 2f6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 2fa:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 2fe:	89 2b       	or	r24, r25
 300:	09 f4       	brne	.+2      	; 0x304 <main+0xc8>
 302:	b3 cf       	rjmp	.-154    	; 0x26a <main+0x2e>
		{
			state = 0;
 304:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <state+0x1>
 308:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <state>
			timer = 0;
 30c:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <timer+0x1>
 310:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <timer>
			reset = 0;
 314:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_end+0x1>
 318:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
 31c:	9e cf       	rjmp	.-196    	; 0x25a <main+0x1e>

0000031e <__vector_5>:
		}
	}
}

ISR(INT4_vect)	// INT4 인터럽트 처리 루틴 : sw1
{
 31e:	1f 92       	push	r1
 320:	0f 92       	push	r0
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	0f 92       	push	r0
 326:	11 24       	eor	r1, r1
 328:	8f 93       	push	r24
 32a:	9f 93       	push	r25
	state = (state + 1) % 2;
 32c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <state>
 330:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <state+0x1>
 334:	01 96       	adiw	r24, 0x01	; 1
 336:	81 70       	andi	r24, 0x01	; 1
 338:	90 78       	andi	r25, 0x80	; 128
 33a:	99 23       	and	r25, r25
 33c:	24 f4       	brge	.+8      	; 0x346 <__vector_5+0x28>
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	8e 6f       	ori	r24, 0xFE	; 254
 342:	9f 6f       	ori	r25, 0xFF	; 255
 344:	01 96       	adiw	r24, 0x01	; 1
 346:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <state+0x1>
 34a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <state>
}
 34e:	9f 91       	pop	r25
 350:	8f 91       	pop	r24
 352:	0f 90       	pop	r0
 354:	0f be       	out	0x3f, r0	; 63
 356:	0f 90       	pop	r0
 358:	1f 90       	pop	r1
 35a:	18 95       	reti

0000035c <__vector_6>:
ISR(INT5_vect)	// INT5 인터럽트 처리 루틴 : sw2
{
 35c:	1f 92       	push	r1
 35e:	0f 92       	push	r0
 360:	0f b6       	in	r0, 0x3f	; 63
 362:	0f 92       	push	r0
 364:	11 24       	eor	r1, r1
 366:	8f 93       	push	r24
 368:	9f 93       	push	r25
	timer++;
 36a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <timer>
 36e:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <timer+0x1>
 372:	01 96       	adiw	r24, 0x01	; 1
 374:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <timer+0x1>
 378:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <timer>
}
 37c:	9f 91       	pop	r25
 37e:	8f 91       	pop	r24
 380:	0f 90       	pop	r0
 382:	0f be       	out	0x3f, r0	; 63
 384:	0f 90       	pop	r0
 386:	1f 90       	pop	r1
 388:	18 95       	reti

0000038a <__vector_7>:
ISR(INT6_vect)	// INT6 인터럽트 처리 루틴 : sw3
{
 38a:	1f 92       	push	r1
 38c:	0f 92       	push	r0
 38e:	0f b6       	in	r0, 0x3f	; 63
 390:	0f 92       	push	r0
 392:	11 24       	eor	r1, r1
 394:	8f 93       	push	r24
 396:	9f 93       	push	r25
	reset++;
 398:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 39c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 3a0:	01 96       	adiw	r24, 0x01	; 1
 3a2:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 3a6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 3aa:	9f 91       	pop	r25
 3ac:	8f 91       	pop	r24
 3ae:	0f 90       	pop	r0
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	0f 90       	pop	r0
 3b4:	1f 90       	pop	r1
 3b6:	18 95       	reti

000003b8 <__udivmodsi4>:
 3b8:	a1 e2       	ldi	r26, 0x21	; 33
 3ba:	1a 2e       	mov	r1, r26
 3bc:	aa 1b       	sub	r26, r26
 3be:	bb 1b       	sub	r27, r27
 3c0:	fd 01       	movw	r30, r26
 3c2:	0d c0       	rjmp	.+26     	; 0x3de <__udivmodsi4_ep>

000003c4 <__udivmodsi4_loop>:
 3c4:	aa 1f       	adc	r26, r26
 3c6:	bb 1f       	adc	r27, r27
 3c8:	ee 1f       	adc	r30, r30
 3ca:	ff 1f       	adc	r31, r31
 3cc:	a2 17       	cp	r26, r18
 3ce:	b3 07       	cpc	r27, r19
 3d0:	e4 07       	cpc	r30, r20
 3d2:	f5 07       	cpc	r31, r21
 3d4:	20 f0       	brcs	.+8      	; 0x3de <__udivmodsi4_ep>
 3d6:	a2 1b       	sub	r26, r18
 3d8:	b3 0b       	sbc	r27, r19
 3da:	e4 0b       	sbc	r30, r20
 3dc:	f5 0b       	sbc	r31, r21

000003de <__udivmodsi4_ep>:
 3de:	66 1f       	adc	r22, r22
 3e0:	77 1f       	adc	r23, r23
 3e2:	88 1f       	adc	r24, r24
 3e4:	99 1f       	adc	r25, r25
 3e6:	1a 94       	dec	r1
 3e8:	69 f7       	brne	.-38     	; 0x3c4 <__udivmodsi4_loop>
 3ea:	60 95       	com	r22
 3ec:	70 95       	com	r23
 3ee:	80 95       	com	r24
 3f0:	90 95       	com	r25
 3f2:	9b 01       	movw	r18, r22
 3f4:	ac 01       	movw	r20, r24
 3f6:	bd 01       	movw	r22, r26
 3f8:	cf 01       	movw	r24, r30
 3fa:	08 95       	ret

000003fc <_exit>:
 3fc:	f8 94       	cli

000003fe <__stop_program>:
 3fe:	ff cf       	rjmp	.-2      	; 0x3fe <__stop_program>
