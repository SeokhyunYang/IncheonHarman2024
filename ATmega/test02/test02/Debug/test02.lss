
test02.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000180  000001f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000180  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001fe  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a45  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000087b  00000000  00000000  00000cd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030a  00000000  00000000  00001554  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00001860  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000437  00000000  00000000  000018b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000181  00000000  00000000  00001ce7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001e68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e8       	ldi	r30, 0x80	; 128
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	1d d0       	rcall	.+58     	; 0xee <main>
  b4:	63 c0       	rjmp	.+198    	; 0x17c <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <display_digit.1736>:
	};
	int i, j;
	DDRD = 0xFF;						//세그먼트 제어 핀 8개를 출력으로 설정
	DDRC = 0x0F;						//자릿수 선택 핀 4개를 출력으로 설정

	void display_digit(int position, int number){
  b8:	2f 92       	push	r2
  ba:	3f 92       	push	r3
		PORTC |= 0x0F;
  bc:	25 b3       	in	r18, 0x15	; 21
  be:	2f 60       	ori	r18, 0x0F	; 15
  c0:	25 bb       	out	0x15, r18	; 21
		PORTC &= ~(1 << (position - 1));
  c2:	45 b3       	in	r20, 0x15	; 21
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	f9 01       	movw	r30, r18
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <display_digit.1736+0x1a>
  ce:	ee 0f       	add	r30, r30
  d0:	ff 1f       	adc	r31, r31
  d2:	8a 95       	dec	r24
  d4:	e2 f7       	brpl	.-8      	; 0xce <display_digit.1736+0x16>
  d6:	cf 01       	movw	r24, r30
  d8:	80 95       	com	r24
  da:	84 23       	and	r24, r20
  dc:	85 bb       	out	0x15, r24	; 21
		
		PORTD = numbers[number];
  de:	f1 01       	movw	r30, r2
  e0:	e6 0f       	add	r30, r22
  e2:	f7 1f       	adc	r31, r23
  e4:	80 81       	ld	r24, Z
  e6:	82 bb       	out	0x12, r24	; 18
	}
  e8:	3f 90       	pop	r3
  ea:	2f 90       	pop	r2
  ec:	08 95       	ret

000000ee <main>:
#include <avr/io.h>
#include <avr/delay.h>


int main(void)
{
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
  f6:	2a 97       	sbiw	r28, 0x0a	; 10
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	f8 94       	cli
  fc:	de bf       	out	0x3e, r29	; 62
  fe:	0f be       	out	0x3f, r0	; 63
 100:	cd bf       	out	0x3d, r28	; 61
	uint8_t numbers[] = {
 102:	8a e0       	ldi	r24, 0x0A	; 10
 104:	e0 e0       	ldi	r30, 0x00	; 0
 106:	f1 e0       	ldi	r31, 0x01	; 1
 108:	de 01       	movw	r26, r28
 10a:	11 96       	adiw	r26, 0x01	; 1
 10c:	01 90       	ld	r0, Z+
 10e:	0d 92       	st	X+, r0
 110:	8a 95       	dec	r24
 112:	e1 f7       	brne	.-8      	; 0x10c <main+0x1e>
		0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x27, 0x7F, 0x67
	};
	int i, j;
	DDRD = 0xFF;						//세그먼트 제어 핀 8개를 출력으로 설정
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	81 bb       	out	0x11, r24	; 17
	DDRC = 0x0F;						//자릿수 선택 핀 4개를 출력으로 설정
 118:	8f e0       	ldi	r24, 0x0F	; 15
 11a:	84 bb       	out	0x14, r24	; 20
		
		PORTD = numbers[number];
	}

	while(1){
		display_digit(1, 1);
 11c:	ce 01       	movw	r24, r28
 11e:	01 96       	adiw	r24, 0x01	; 1
 120:	1c 01       	movw	r2, r24
 122:	61 e0       	ldi	r22, 0x01	; 1
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	c6 df       	rcall	.-116    	; 0xb8 <display_digit.1736>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12c:	8f e1       	ldi	r24, 0x1F	; 31
 12e:	9e e4       	ldi	r25, 0x4E	; 78
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <main+0x42>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x48>
 136:	00 00       	nop
		_delay_ms(5);
		display_digit(2, 2);
 138:	62 e0       	ldi	r22, 0x02	; 2
 13a:	70 e0       	ldi	r23, 0x00	; 0
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	bb df       	rcall	.-138    	; 0xb8 <display_digit.1736>
 142:	8f e1       	ldi	r24, 0x1F	; 31
 144:	9e e4       	ldi	r25, 0x4E	; 78
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <main+0x58>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <main+0x5e>
 14c:	00 00       	nop
		_delay_ms(5);
		display_digit(3, 3);
 14e:	63 e0       	ldi	r22, 0x03	; 3
 150:	70 e0       	ldi	r23, 0x00	; 0
 152:	83 e0       	ldi	r24, 0x03	; 3
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	b0 df       	rcall	.-160    	; 0xb8 <display_digit.1736>
 158:	8f e1       	ldi	r24, 0x1F	; 31
 15a:	9e e4       	ldi	r25, 0x4E	; 78
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <main+0x6e>
 160:	00 c0       	rjmp	.+0      	; 0x162 <main+0x74>
 162:	00 00       	nop
		_delay_ms(5);
		display_digit(4, 4);
 164:	64 e0       	ldi	r22, 0x04	; 4
 166:	70 e0       	ldi	r23, 0x00	; 0
 168:	84 e0       	ldi	r24, 0x04	; 4
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	a5 df       	rcall	.-182    	; 0xb8 <display_digit.1736>
 16e:	8f e1       	ldi	r24, 0x1F	; 31
 170:	9e e4       	ldi	r25, 0x4E	; 78
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <main+0x84>
 176:	00 c0       	rjmp	.+0      	; 0x178 <main+0x8a>
 178:	00 00       	nop
 17a:	d0 cf       	rjmp	.-96     	; 0x11c <main+0x2e>

0000017c <_exit>:
 17c:	f8 94       	cli

0000017e <__stop_program>:
 17e:	ff cf       	rjmp	.-2      	; 0x17e <__stop_program>
