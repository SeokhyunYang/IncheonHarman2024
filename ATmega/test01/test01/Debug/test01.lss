
test01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000001be  00000252  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800110  00800110  00000262  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000262  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000091c  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000085b  00000000  00000000  00000c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000032a  00000000  00000000  00001477  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  000017a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000432  00000000  00000000  0000180c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000130  00000000  00000000  00001c3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001d6e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	53 c0       	rjmp	.+166    	; 0xc8 <__vector_8>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee eb       	ldi	r30, 0xBE	; 190
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 31       	cpi	r26, 0x12	; 18
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	29 d0       	rcall	.+82     	; 0x116 <main>
  c4:	7a c0       	rjmp	.+244    	; 0x1ba <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_8>:
#include <avr/interrupt.h>

volatile int state = 0;

ISR(INT7_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
	state = (state + 1) % 2;			// 상태 전환
  d6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
  da:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
  de:	01 96       	adiw	r24, 0x01	; 1
  e0:	81 70       	andi	r24, 0x01	; 1
  e2:	90 78       	andi	r25, 0x80	; 128
  e4:	99 23       	and	r25, r25
  e6:	24 f4       	brge	.+8      	; 0xf0 <__vector_8+0x28>
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	8e 6f       	ori	r24, 0xFE	; 254
  ec:	9f 6f       	ori	r25, 0xFF	; 255
  ee:	01 96       	adiw	r24, 0x01	; 1
  f0:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
  f4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
}
  f8:	9f 91       	pop	r25
  fa:	8f 91       	pop	r24
  fc:	0f 90       	pop	r0
  fe:	0f be       	out	0x3f, r0	; 63
 100:	0f 90       	pop	r0
 102:	1f 90       	pop	r1
 104:	18 95       	reti

00000106 <INIT_INT7>:

void INIT_INT7(void)
{
	EIMSK |= (1 << INT7);			// INT0 인터럽트 활성화
 106:	89 b7       	in	r24, 0x39	; 57
 108:	80 68       	ori	r24, 0x80	; 128
 10a:	89 bf       	out	0x39, r24	; 57
	EICRB |= (1 << ISC70);			// 하강 에지에서 인터럽트 발생
 10c:	8a b7       	in	r24, 0x3a	; 58
 10e:	80 64       	ori	r24, 0x40	; 64
 110:	8a bf       	out	0x3a, r24	; 58
	sei();							// 전역적으로 인터럽트 허용
 112:	78 94       	sei
 114:	08 95       	ret

00000116 <main>:
}

int main(void)
{
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
 11e:	60 97       	sbiw	r28, 0x10	; 16
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	f8 94       	cli
 124:	de bf       	out	0x3e, r29	; 62
 126:	0f be       	out	0x3f, r0	; 63
 128:	cd bf       	out	0x3d, r28	; 61
	uint8_t digit[] = {
 12a:	80 e1       	ldi	r24, 0x10	; 16
 12c:	e0 e0       	ldi	r30, 0x00	; 0
 12e:	f1 e0       	ldi	r31, 0x01	; 1
 130:	de 01       	movw	r26, r28
 132:	11 96       	adiw	r26, 0x01	; 1
 134:	01 90       	ld	r0, Z+
 136:	0d 92       	st	X+, r0
 138:	8a 95       	dec	r24
 13a:	e1 f7       	brne	.-8      	; 0x134 <main+0x1e>
		0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x27, 0x7F, 0x67, 0x77, 0x7c, 0x58, 0x5e, 0x79, 0x71
	};
	int i, j = 0;
	DDRD = 0xFF;		// 세그먼트 제어 핀 8개를 출력으로 설정
 13c:	8f ef       	ldi	r24, 0xFF	; 255
 13e:	81 bb       	out	0x11, r24	; 17
	DDRC = 0x0F;		// 자릿수 선택 핀 4개를 출력으로 설정
 140:	8f e0       	ldi	r24, 0x0F	; 15
 142:	84 bb       	out	0x14, r24	; 20
	DDRE = 0X00;		// 스위치를 입력으로 설정
 144:	12 b8       	out	0x02, r1	; 2
	PORTE = 0X80;		// 풀업저항
 146:	80 e8       	ldi	r24, 0x80	; 128
 148:	83 b9       	out	0x03, r24	; 3
	
	INIT_INT7();
 14a:	dd df       	rcall	.-70     	; 0x106 <INIT_INT7>
	
	while (1)
	{
		if(state == 0)
 14c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 150:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 154:	89 2b       	or	r24, r25
 156:	d1 f7       	brne	.-12     	; 0x14c <main+0x36>
 158:	2a c0       	rjmp	.+84     	; 0x1ae <main+0x98>
		{
			for (i = 0; i < 4; i++)
			{	
				//해당 자리에만 0(GND)를 출력하고 나머지에는 1을 출력하여 자리 선택
				PORTC |= 0x0F;
 15a:	85 b3       	in	r24, 0x15	; 21
 15c:	8f 60       	ori	r24, 0x0F	; 15
 15e:	85 bb       	out	0x15, r24	; 21
				PORTC &= (1 << (i));
 160:	25 b3       	in	r18, 0x15	; 21
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	04 2e       	mov	r0, r20
 168:	02 c0       	rjmp	.+4      	; 0x16e <main+0x58>
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	0a 94       	dec	r0
 170:	e2 f7       	brpl	.-8      	; 0x16a <main+0x54>
 172:	82 23       	and	r24, r18
 174:	85 bb       	out	0x15, r24	; 21
				for (j = 0; j < 10; j++){
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	13 c0       	rjmp	.+38     	; 0x1a2 <main+0x8c>
					PORTD = ~digit[j];
 17c:	e1 e0       	ldi	r30, 0x01	; 1
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	ec 0f       	add	r30, r28
 182:	fd 1f       	adc	r31, r29
 184:	e8 0f       	add	r30, r24
 186:	f9 1f       	adc	r31, r25
 188:	20 81       	ld	r18, Z
 18a:	20 95       	com	r18
 18c:	22 bb       	out	0x12, r18	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18e:	2f ef       	ldi	r18, 0xFF	; 255
 190:	33 ed       	ldi	r19, 0xD3	; 211
 192:	60 e3       	ldi	r22, 0x30	; 48
 194:	21 50       	subi	r18, 0x01	; 1
 196:	30 40       	sbci	r19, 0x00	; 0
 198:	60 40       	sbci	r22, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <main+0x7e>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <main+0x88>
 19e:	00 00       	nop
			for (i = 0; i < 4; i++)
			{	
				//해당 자리에만 0(GND)를 출력하고 나머지에는 1을 출력하여 자리 선택
				PORTC |= 0x0F;
				PORTC &= (1 << (i));
				for (j = 0; j < 10; j++){
 1a0:	01 96       	adiw	r24, 0x01	; 1
 1a2:	8a 30       	cpi	r24, 0x0A	; 10
 1a4:	91 05       	cpc	r25, r1
 1a6:	54 f3       	brlt	.-44     	; 0x17c <main+0x66>
	
	while (1)
	{
		if(state == 0)
		{
			for (i = 0; i < 4; i++)
 1a8:	4f 5f       	subi	r20, 0xFF	; 255
 1aa:	5f 4f       	sbci	r21, 0xFF	; 255
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <main+0x9c>
 1ae:	40 e0       	ldi	r20, 0x00	; 0
 1b0:	50 e0       	ldi	r21, 0x00	; 0
 1b2:	44 30       	cpi	r20, 0x04	; 4
 1b4:	51 05       	cpc	r21, r1
 1b6:	8c f2       	brlt	.-94     	; 0x15a <main+0x44>
 1b8:	c9 cf       	rjmp	.-110    	; 0x14c <main+0x36>

000001ba <_exit>:
 1ba:	f8 94       	cli

000001bc <__stop_program>:
 1bc:	ff cf       	rjmp	.-2      	; 0x1bc <__stop_program>
