
test02.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000034c  000003e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000034c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800110  00800110  000003f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000420  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000af3  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000907  00000000  00000000  00000f97  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003db  00000000  00000000  0000189e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e8  00000000  00000000  00001c7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043e  00000000  00000000  00001d64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000414  00000000  00000000  000021a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000025b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	53 c0       	rjmp	.+166    	; 0xc8 <__vector_8>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e4       	ldi	r30, 0x4C	; 76
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 31       	cpi	r26, 0x17	; 23
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	d3 d0       	rcall	.+422    	; 0x26a <main>
  c4:	41 c1       	rjmp	.+642    	; 0x348 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_8>:
char arr[5]; // Segment를 담을 안전영역

volatile int state = 0;

ISR(INT7_vect)	// 인터럽트 발생했을 때 state 증가
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
	state++;
  d6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
  da:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
  de:	01 96       	adiw	r24, 0x01	; 1
  e0:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
  e4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
}
  e8:	9f 91       	pop	r25
  ea:	8f 91       	pop	r24
  ec:	0f 90       	pop	r0
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	0f 90       	pop	r0
  f2:	1f 90       	pop	r1
  f4:	18 95       	reti

000000f6 <INIT_INT7>:

void INIT_INT7(void)
{
	EIMSK = 0x80;			// INT7 인터럽트 활성화 // EIMSK |= (1 << INT7); 
  f6:	80 e8       	ldi	r24, 0x80	; 128
  f8:	89 bf       	out	0x39, r24	; 57
	EICRB = 0xc0;			// 상승 에지에서 인터럽트 발생 // EICRB |= (1 << ISC71)|(1 << ISC70);
  fa:	80 ec       	ldi	r24, 0xC0	; 192
  fc:	8a bf       	out	0x3a, r24	; 58
	sei();					// set interrupt : 전역적으로 인터럽트 허용
  fe:	78 94       	sei
 100:	08 95       	ret

00000102 <seg>:
}

void seg(int sel, uint8_t c)
{
	PORTC |= 0x0F;
 102:	25 b3       	in	r18, 0x15	; 21
 104:	2f 60       	ori	r18, 0x0F	; 15
 106:	25 bb       	out	0x15, r18	; 21
	PORTC &= (1 << (3-sel));
 108:	45 b3       	in	r20, 0x15	; 21
 10a:	23 e0       	ldi	r18, 0x03	; 3
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	28 1b       	sub	r18, r24
 110:	39 0b       	sbc	r19, r25
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	02 c0       	rjmp	.+4      	; 0x11c <seg+0x1a>
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	2a 95       	dec	r18
 11e:	e2 f7       	brpl	.-8      	; 0x118 <seg+0x16>
 120:	84 23       	and	r24, r20
 122:	85 bb       	out	0x15, r24	; 21
	PORTD = ~c;		// 숫자 데이터 출력
 124:	60 95       	com	r22
 126:	62 bb       	out	0x12, r22	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 128:	8f e3       	ldi	r24, 0x3F	; 63
 12a:	9f e1       	ldi	r25, 0x1F	; 31
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <seg+0x2a>
 130:	00 c0       	rjmp	.+0      	; 0x132 <seg+0x30>
 132:	00 00       	nop
 134:	08 95       	ret

00000136 <FND_4>:
	_delay_ms(2);	// 0.002초 간격으로 전환
}

void FND_4(char *inf)	// Segment Image 배열
{
 136:	0f 93       	push	r16
 138:	1f 93       	push	r17
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	8c 01       	movw	r16, r24
	for(int i = 0; i < 4; i++)
 140:	c0 e0       	ldi	r28, 0x00	; 0
 142:	d0 e0       	ldi	r29, 0x00	; 0
 144:	07 c0       	rjmp	.+14     	; 0x154 <FND_4+0x1e>
	{
		seg(i, *(inf+i));	// seg(i, inf[i]));
 146:	f8 01       	movw	r30, r16
 148:	ec 0f       	add	r30, r28
 14a:	fd 1f       	adc	r31, r29
 14c:	60 81       	ld	r22, Z
 14e:	ce 01       	movw	r24, r28
 150:	d8 df       	rcall	.-80     	; 0x102 <seg>
	_delay_ms(2);	// 0.002초 간격으로 전환
}

void FND_4(char *inf)	// Segment Image 배열
{
	for(int i = 0; i < 4; i++)
 152:	21 96       	adiw	r28, 0x01	; 1
 154:	c4 30       	cpi	r28, 0x04	; 4
 156:	d1 05       	cpc	r29, r1
 158:	b4 f3       	brlt	.-20     	; 0x146 <FND_4+0x10>
	{
		seg(i, *(inf+i));	// seg(i, inf[i]));
	}
}
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	1f 91       	pop	r17
 160:	0f 91       	pop	r16
 162:	08 95       	ret

00000164 <Trans>:

char* Trans(unsigned long num)	// 10진 정수 ==> 문자열로 FND_4
{
 164:	4f 92       	push	r4
 166:	5f 92       	push	r5
 168:	6f 92       	push	r6
 16a:	7f 92       	push	r7
 16c:	8f 92       	push	r8
 16e:	9f 92       	push	r9
 170:	af 92       	push	r10
 172:	bf 92       	push	r11
 174:	cf 92       	push	r12
 176:	df 92       	push	r13
 178:	ef 92       	push	r14
 17a:	ff 92       	push	r15
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	cd b7       	in	r28, 0x3d	; 61
 182:	de b7       	in	r29, 0x3e	; 62
 184:	28 97       	sbiw	r28, 0x08	; 8
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	f8 94       	cli
 18a:	de bf       	out	0x3e, r29	; 62
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	cd bf       	out	0x3d, r28	; 61
 190:	4b 01       	movw	r8, r22
 192:	5c 01       	movw	r10, r24
	// 10진 정수 계산
	int n4 = (num / 1000) % 10;	// D
 194:	28 ee       	ldi	r18, 0xE8	; 232
 196:	33 e0       	ldi	r19, 0x03	; 3
 198:	40 e0       	ldi	r20, 0x00	; 0
 19a:	50 e0       	ldi	r21, 0x00	; 0
 19c:	b3 d0       	rcall	.+358    	; 0x304 <__udivmodsi4>
 19e:	0f 2e       	mov	r0, r31
 1a0:	fa e0       	ldi	r31, 0x0A	; 10
 1a2:	cf 2e       	mov	r12, r31
 1a4:	d1 2c       	mov	r13, r1
 1a6:	e1 2c       	mov	r14, r1
 1a8:	f1 2c       	mov	r15, r1
 1aa:	f0 2d       	mov	r31, r0
 1ac:	ca 01       	movw	r24, r20
 1ae:	b9 01       	movw	r22, r18
 1b0:	a7 01       	movw	r20, r14
 1b2:	96 01       	movw	r18, r12
 1b4:	a7 d0       	rcall	.+334    	; 0x304 <__udivmodsi4>
 1b6:	2b 01       	movw	r4, r22
 1b8:	3c 01       	movw	r6, r24
	int n3 = (num / 100) % 10;	// C
 1ba:	c5 01       	movw	r24, r10
 1bc:	b4 01       	movw	r22, r8
 1be:	24 e6       	ldi	r18, 0x64	; 100
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	40 e0       	ldi	r20, 0x00	; 0
 1c4:	50 e0       	ldi	r21, 0x00	; 0
 1c6:	9e d0       	rcall	.+316    	; 0x304 <__udivmodsi4>
 1c8:	ca 01       	movw	r24, r20
 1ca:	b9 01       	movw	r22, r18
 1cc:	a7 01       	movw	r20, r14
 1ce:	96 01       	movw	r18, r12
 1d0:	99 d0       	rcall	.+306    	; 0x304 <__udivmodsi4>
 1d2:	69 83       	std	Y+1, r22	; 0x01
 1d4:	7a 83       	std	Y+2, r23	; 0x02
 1d6:	8b 83       	std	Y+3, r24	; 0x03
 1d8:	9c 83       	std	Y+4, r25	; 0x04
	int n2 = (num / 10) % 10;	// B
 1da:	c5 01       	movw	r24, r10
 1dc:	b4 01       	movw	r22, r8
 1de:	a7 01       	movw	r20, r14
 1e0:	96 01       	movw	r18, r12
 1e2:	90 d0       	rcall	.+288    	; 0x304 <__udivmodsi4>
 1e4:	6d 83       	std	Y+5, r22	; 0x05
 1e6:	7e 83       	std	Y+6, r23	; 0x06
 1e8:	8f 83       	std	Y+7, r24	; 0x07
 1ea:	98 87       	std	Y+8, r25	; 0x08
 1ec:	ca 01       	movw	r24, r20
 1ee:	b9 01       	movw	r22, r18
 1f0:	a7 01       	movw	r20, r14
 1f2:	96 01       	movw	r18, r12
 1f4:	87 d0       	rcall	.+270    	; 0x304 <__udivmodsi4>
	int n1 = num % 10;			// A
	
	// 문자열로 입력
	arr[0] = digit[n1];
 1f6:	ed 81       	ldd	r30, Y+5	; 0x05
 1f8:	fe 81       	ldd	r31, Y+6	; 0x06
 1fa:	e0 50       	subi	r30, 0x00	; 0
 1fc:	ff 4f       	sbci	r31, 0xFF	; 255
 1fe:	20 81       	ld	r18, Z
 200:	e2 e1       	ldi	r30, 0x12	; 18
 202:	f1 e0       	ldi	r31, 0x01	; 1
 204:	20 83       	st	Z, r18
	arr[1] = digit[n2];
 206:	db 01       	movw	r26, r22
 208:	a0 50       	subi	r26, 0x00	; 0
 20a:	bf 4f       	sbci	r27, 0xFF	; 255
 20c:	8c 91       	ld	r24, X
 20e:	81 83       	std	Z+1, r24	; 0x01
	arr[2] = digit[n3] + 0x80;
 210:	a9 81       	ldd	r26, Y+1	; 0x01
 212:	ba 81       	ldd	r27, Y+2	; 0x02
 214:	a0 50       	subi	r26, 0x00	; 0
 216:	bf 4f       	sbci	r27, 0xFF	; 255
 218:	8c 91       	ld	r24, X
 21a:	80 58       	subi	r24, 0x80	; 128
 21c:	82 83       	std	Z+2, r24	; 0x02
	if (n4 == 0)	arr[3] = 0x00;		// n4 자릿수가 0이면 표시 안함
 21e:	41 14       	cp	r4, r1
 220:	51 04       	cpc	r5, r1
 222:	19 f4       	brne	.+6      	; 0x22a <Trans+0xc6>
 224:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <arr+0x3>
 228:	06 c0       	rjmp	.+12     	; 0x236 <Trans+0xd2>
	else			arr[3] = digit[n4];
 22a:	f2 01       	movw	r30, r4
 22c:	e0 50       	subi	r30, 0x00	; 0
 22e:	ff 4f       	sbci	r31, 0xFF	; 255
 230:	80 81       	ld	r24, Z
 232:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <arr+0x3>
	
	FND_4(arr);
 236:	82 e1       	ldi	r24, 0x12	; 18
 238:	91 e0       	ldi	r25, 0x01	; 1
 23a:	7d df       	rcall	.-262    	; 0x136 <FND_4>
	return arr;
}
 23c:	82 e1       	ldi	r24, 0x12	; 18
 23e:	91 e0       	ldi	r25, 0x01	; 1
 240:	28 96       	adiw	r28, 0x08	; 8
 242:	0f b6       	in	r0, 0x3f	; 63
 244:	f8 94       	cli
 246:	de bf       	out	0x3e, r29	; 62
 248:	0f be       	out	0x3f, r0	; 63
 24a:	cd bf       	out	0x3d, r28	; 61
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	ff 90       	pop	r15
 252:	ef 90       	pop	r14
 254:	df 90       	pop	r13
 256:	cf 90       	pop	r12
 258:	bf 90       	pop	r11
 25a:	af 90       	pop	r10
 25c:	9f 90       	pop	r9
 25e:	8f 90       	pop	r8
 260:	7f 90       	pop	r7
 262:	6f 90       	pop	r6
 264:	5f 90       	pop	r5
 266:	4f 90       	pop	r4
 268:	08 95       	ret

0000026a <main>:

int main(void)
{
	
	unsigned long j = 0;
	DDRD = 0xFF;		// 세그먼트 제어 핀 8개를 출력으로 설정
 26a:	8f ef       	ldi	r24, 0xFF	; 255
 26c:	81 bb       	out	0x11, r24	; 17
	DDRC = 0x0F;		// 자릿수 선택 핀 4개를 출력으로 설정
 26e:	8f e0       	ldi	r24, 0x0F	; 15
 270:	84 bb       	out	0x14, r24	; 20
	DDRE = 0x3F;		// 0011 1111, PE7=0(INT7용 값 입력), PE4=1
 272:	8f e3       	ldi	r24, 0x3F	; 63
 274:	82 b9       	out	0x02, r24	; 2
	PORTE = 0xE3;		// PE4에 0 출력
 276:	83 ee       	ldi	r24, 0xE3	; 227
 278:	83 b9       	out	0x03, r24	; 3
	
	INIT_INT7();
 27a:	3d df       	rcall	.-390    	; 0xf6 <INIT_INT7>
*/

int main(void)
{
	
	unsigned long j = 0;
 27c:	c1 2c       	mov	r12, r1
 27e:	d1 2c       	mov	r13, r1
 280:	76 01       	movw	r14, r12
	INIT_INT7();
	
	while (1)
	{
		//	초기 상태에서는 (----) 표시
		if(state == 0)
 282:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 286:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 28a:	89 2b       	or	r24, r25
 28c:	79 f4       	brne	.+30     	; 0x2ac <main+0x42>
		{
			PORTC |= 0x0F;
 28e:	85 b3       	in	r24, 0x15	; 21
 290:	8f 60       	ori	r24, 0x0F	; 15
 292:	85 bb       	out	0x15, r24	; 21
			PORTD = ~0x40;
 294:	8f eb       	ldi	r24, 0xBF	; 191
 296:	82 bb       	out	0x12, r24	; 18
 298:	2f ef       	ldi	r18, 0xFF	; 255
 29a:	83 ed       	ldi	r24, 0xD3	; 211
 29c:	90 e3       	ldi	r25, 0x30	; 48
 29e:	21 50       	subi	r18, 0x01	; 1
 2a0:	80 40       	sbci	r24, 0x00	; 0
 2a2:	90 40       	sbci	r25, 0x00	; 0
 2a4:	e1 f7       	brne	.-8      	; 0x29e <main+0x34>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <main+0x3e>
 2a8:	00 00       	nop
 2aa:	eb cf       	rjmp	.-42     	; 0x282 <main+0x18>
			_delay_ms(1000);
		}
		
		
		else if ((state > 0) && (state % 2 == 1))
 2ac:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 2b0:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 2b4:	18 16       	cp	r1, r24
 2b6:	19 06       	cpc	r1, r25
 2b8:	0c f5       	brge	.+66     	; 0x2fc <main+0x92>
 2ba:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 2be:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 2c2:	81 70       	andi	r24, 0x01	; 1
 2c4:	90 78       	andi	r25, 0x80	; 128
 2c6:	99 23       	and	r25, r25
 2c8:	24 f4       	brge	.+8      	; 0x2d2 <main+0x68>
 2ca:	01 97       	sbiw	r24, 0x01	; 1
 2cc:	8e 6f       	ori	r24, 0xFE	; 254
 2ce:	9f 6f       	ori	r25, 0xFF	; 255
 2d0:	01 96       	adiw	r24, 0x01	; 1
 2d2:	01 97       	sbiw	r24, 0x01	; 1
 2d4:	99 f4       	brne	.+38     	; 0x2fc <main+0x92>
		{
			Trans(j++);
 2d6:	46 01       	movw	r8, r12
 2d8:	57 01       	movw	r10, r14
 2da:	2f ef       	ldi	r18, 0xFF	; 255
 2dc:	82 1a       	sub	r8, r18
 2de:	92 0a       	sbc	r9, r18
 2e0:	a2 0a       	sbc	r10, r18
 2e2:	b2 0a       	sbc	r11, r18
 2e4:	c7 01       	movw	r24, r14
 2e6:	b6 01       	movw	r22, r12
 2e8:	3d df       	rcall	.-390    	; 0x164 <Trans>
 2ea:	8f e3       	ldi	r24, 0x3F	; 63
 2ec:	9f e1       	ldi	r25, 0x1F	; 31
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <main+0x84>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <main+0x8a>
 2f4:	00 00       	nop
 2f6:	75 01       	movw	r14, r10
 2f8:	64 01       	movw	r12, r8
 2fa:	c3 cf       	rjmp	.-122    	; 0x282 <main+0x18>
			_delay_ms(2);
		}
		else{Trans(j);}	// 스위치를 누르면 인터럽트 발생하여 정지
 2fc:	c7 01       	movw	r24, r14
 2fe:	b6 01       	movw	r22, r12
 300:	31 df       	rcall	.-414    	; 0x164 <Trans>
 302:	bf cf       	rjmp	.-130    	; 0x282 <main+0x18>

00000304 <__udivmodsi4>:
 304:	a1 e2       	ldi	r26, 0x21	; 33
 306:	1a 2e       	mov	r1, r26
 308:	aa 1b       	sub	r26, r26
 30a:	bb 1b       	sub	r27, r27
 30c:	fd 01       	movw	r30, r26
 30e:	0d c0       	rjmp	.+26     	; 0x32a <__udivmodsi4_ep>

00000310 <__udivmodsi4_loop>:
 310:	aa 1f       	adc	r26, r26
 312:	bb 1f       	adc	r27, r27
 314:	ee 1f       	adc	r30, r30
 316:	ff 1f       	adc	r31, r31
 318:	a2 17       	cp	r26, r18
 31a:	b3 07       	cpc	r27, r19
 31c:	e4 07       	cpc	r30, r20
 31e:	f5 07       	cpc	r31, r21
 320:	20 f0       	brcs	.+8      	; 0x32a <__udivmodsi4_ep>
 322:	a2 1b       	sub	r26, r18
 324:	b3 0b       	sbc	r27, r19
 326:	e4 0b       	sbc	r30, r20
 328:	f5 0b       	sbc	r31, r21

0000032a <__udivmodsi4_ep>:
 32a:	66 1f       	adc	r22, r22
 32c:	77 1f       	adc	r23, r23
 32e:	88 1f       	adc	r24, r24
 330:	99 1f       	adc	r25, r25
 332:	1a 94       	dec	r1
 334:	69 f7       	brne	.-38     	; 0x310 <__udivmodsi4_loop>
 336:	60 95       	com	r22
 338:	70 95       	com	r23
 33a:	80 95       	com	r24
 33c:	90 95       	com	r25
 33e:	9b 01       	movw	r18, r22
 340:	ac 01       	movw	r20, r24
 342:	bd 01       	movw	r22, r26
 344:	cf 01       	movw	r24, r30
 346:	08 95       	ret

00000348 <_exit>:
 348:	f8 94       	cli

0000034a <__stop_program>:
 34a:	ff cf       	rjmp	.-2      	; 0x34a <__stop_program>
