
test_adc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  0000033c  000003d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000033c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  0080011a  0080011a  000003ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000041c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c65  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ce  00000000  00000000  00001125  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000470  00000000  00000000  00001af3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  00001f64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048a  00000000  00000000  00002068  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000437  00000000  00000000  000024f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002929  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e3       	ldi	r30, 0x3C	; 60
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 31       	cpi	r26, 0x1A	; 26
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e1       	ldi	r26, 0x1A	; 26
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	af 31       	cpi	r26, 0x1F	; 31
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	1b d0       	rcall	.+54     	; 0xfa <main>
  c4:	39 c1       	rjmp	.+626    	; 0x338 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <ADC_init>:



void ADC_init(unsigned char channel)
{
	ADMUX |= (1 << REFS0); 		// AVCC를 기준 전압으로 선택
  c8:	97 b1       	in	r25, 0x07	; 7
  ca:	90 64       	ori	r25, 0x40	; 64
  cc:	97 b9       	out	0x07, r25	; 7
	
	ADCSRA |= 0x07;				// 분주비 설정
  ce:	96 b1       	in	r25, 0x06	; 6
  d0:	97 60       	ori	r25, 0x07	; 7
  d2:	96 b9       	out	0x06, r25	; 6
	ADCSRA |= (1 << ADEN);		// ADC 활성화
  d4:	96 b1       	in	r25, 0x06	; 6
  d6:	90 68       	ori	r25, 0x80	; 128
  d8:	96 b9       	out	0x06, r25	; 6
	ADCSRA |= (1 << ADFR);		// 프리 러닝 모드
  da:	96 b1       	in	r25, 0x06	; 6
  dc:	90 62       	ori	r25, 0x20	; 32
  de:	96 b9       	out	0x06, r25	; 6

	ADMUX = ((ADMUX & 0xE0) | channel);	// 채널 선택
  e0:	97 b1       	in	r25, 0x07	; 7
  e2:	90 7e       	andi	r25, 0xE0	; 224
  e4:	89 2b       	or	r24, r25
  e6:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);		// 변환 시작
  e8:	86 b1       	in	r24, 0x06	; 6
  ea:	80 64       	ori	r24, 0x40	; 64
  ec:	86 b9       	out	0x06, r24	; 6
  ee:	08 95       	ret

000000f0 <read_ADC>:
}

int read_ADC(void)
{
	while(!(ADCSRA & (1 << ADIF)));	// 변환 종료 대기
  f0:	34 9b       	sbis	0x06, 4	; 6
  f2:	fe cf       	rjmp	.-4      	; 0xf0 <read_ADC>
	
	return ADC;					// 10비트 값을 반환
  f4:	84 b1       	in	r24, 0x04	; 4
  f6:	95 b1       	in	r25, 0x05	; 5
}
  f8:	08 95       	ret

000000fa <main>:

int main(void)
{
	SegPort(&PORTC, &PORTD, &DDRC, &DDRD);	// Segment 포트, 출력핀 지정
  fa:	21 e3       	ldi	r18, 0x31	; 49
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	44 e3       	ldi	r20, 0x34	; 52
 100:	50 e0       	ldi	r21, 0x00	; 0
 102:	62 e3       	ldi	r22, 0x32	; 50
 104:	70 e0       	ldi	r23, 0x00	; 0
 106:	85 e3       	ldi	r24, 0x35	; 53
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0b d0       	rcall	.+22     	; 0x122 <SegPort>
	int read;
	
	ADC_init(0);				// AD 변환기 초기화
 10c:	80 e0       	ldi	r24, 0x00	; 0
	
	while(1)
	{
		read = read_ADC();		// 가변저항 값 읽기
 10e:	dc df       	rcall	.-72     	; 0xc8 <ADC_init>
 110:	ef df       	rcall	.-34     	; 0xf0 <read_ADC>
				
		SegDisp(4, read);
 112:	ac 01       	movw	r20, r24
 114:	99 0f       	add	r25, r25
 116:	66 0b       	sbc	r22, r22
 118:	77 0b       	sbc	r23, r23
 11a:	84 e0       	ldi	r24, 0x04	; 4
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	6a d0       	rcall	.+212    	; 0x1f4 <SegDisp>
 120:	f7 cf       	rjmp	.-18     	; 0x110 <main+0x16>

00000122 <SegPort>:
char *PC = &PORTA, *PD = &PORTB;	// 7-Segment 포트를 지정할 포인터 변수
char *DC = &DDRA,  *DD = &DDRB;		// 7-Segment 출력핀을 지정할 포인터 변수

void SegPort(char *p1, char *p2, char *d1, char *d2)
{
	PC = p1;
 122:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <PC+0x1>
 126:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <PC>
	PD = p2;
 12a:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <PD+0x1>
 12e:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <PD>
	DC = d1;
 132:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <DC+0x1>
 136:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <DC>
	DD = d2;
 13a:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 13e:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
	*DC = 0x0F;	// DDRC = 0x0F; 자릿수 선택 핀 4개를 출력으로 설정
 142:	8f e0       	ldi	r24, 0x0F	; 15
 144:	fa 01       	movw	r30, r20
 146:	80 83       	st	Z, r24
	*DD = 0xFF;	// DDRD = 0xFF; 세그먼트 제어 핀 8개를 출력으로 설정
 148:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 14c:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 150:	8f ef       	ldi	r24, 0xFF	; 255
 152:	80 83       	st	Z, r24
 154:	08 95       	ret

00000156 <seg>:

// 7-Segment 사용 : 4 Module - A type
//   Pin Assign   : PDx - Segment image, PCx - Module select
void seg(int sel, uint8_t c)
{
	*PC |= 0x0F;
 156:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <PC>
 15a:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <PC+0x1>
 15e:	20 81       	ld	r18, Z
 160:	2f 60       	ori	r18, 0x0F	; 15
 162:	20 83       	st	Z, r18
	*PC &= (1 << (3-sel));
 164:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <PC>
 168:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <PC+0x1>
 16c:	23 e0       	ldi	r18, 0x03	; 3
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	28 1b       	sub	r18, r24
 172:	39 0b       	sbc	r19, r25
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	02 c0       	rjmp	.+4      	; 0x17e <seg+0x28>
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	2a 95       	dec	r18
 180:	e2 f7       	brpl	.-8      	; 0x17a <seg+0x24>
 182:	90 81       	ld	r25, Z
 184:	89 23       	and	r24, r25
 186:	80 83       	st	Z, r24
	*PD = ~c;		// 숫자 데이터 출력
 188:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <PD>
 18c:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <PD+0x1>
 190:	60 95       	com	r22
 192:	60 83       	st	Z, r22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 194:	8f e3       	ldi	r24, 0x3F	; 63
 196:	9f e1       	ldi	r25, 0x1F	; 31
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <seg+0x42>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <seg+0x48>
 19e:	00 00       	nop
 1a0:	08 95       	ret

000001a2 <FND_4>:
	_delay_ms(2);	// 0.002초 간격으로 전환
}

void FND_4(int order, char *inf)	// Segment Image 배열
{
 1a2:	ef 92       	push	r14
 1a4:	ff 92       	push	r15
 1a6:	0f 93       	push	r16
 1a8:	1f 93       	push	r17
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	8c 01       	movw	r16, r24
 1b0:	7b 01       	movw	r14, r22
	for(int i = 0; i < sm; i++)
 1b2:	c0 e0       	ldi	r28, 0x00	; 0
 1b4:	d0 e0       	ldi	r29, 0x00	; 0
 1b6:	0a c0       	rjmp	.+20     	; 0x1cc <FND_4+0x2a>
	{
		if(i == order) continue;
 1b8:	c0 17       	cp	r28, r16
 1ba:	d1 07       	cpc	r29, r17
 1bc:	31 f0       	breq	.+12     	; 0x1ca <FND_4+0x28>
		else seg(i, *(inf+i));	// seg(i, inf[i]));
 1be:	f7 01       	movw	r30, r14
 1c0:	ec 0f       	add	r30, r28
 1c2:	fd 1f       	adc	r31, r29
 1c4:	60 81       	ld	r22, Z
 1c6:	ce 01       	movw	r24, r28
 1c8:	c6 df       	rcall	.-116    	; 0x156 <seg>
	_delay_ms(2);	// 0.002초 간격으로 전환
}

void FND_4(int order, char *inf)	// Segment Image 배열
{
	for(int i = 0; i < sm; i++)
 1ca:	21 96       	adiw	r28, 0x01	; 1
 1cc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <sm>
 1d0:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <sm+0x1>
 1d4:	c8 17       	cp	r28, r24
 1d6:	d9 07       	cpc	r29, r25
 1d8:	7c f3       	brlt	.-34     	; 0x1b8 <FND_4+0x16>
 1da:	8f e3       	ldi	r24, 0x3F	; 63
 1dc:	9f e1       	ldi	r25, 0x1F	; 31
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <FND_4+0x3c>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <FND_4+0x42>
 1e4:	00 00       	nop
	{
		if(i == order) continue;
		else seg(i, *(inf+i));	// seg(i, inf[i]));
	}
	_delay_ms(2);
}
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	1f 91       	pop	r17
 1ec:	0f 91       	pop	r16
 1ee:	ff 90       	pop	r15
 1f0:	ef 90       	pop	r14
 1f2:	08 95       	ret

000001f4 <SegDisp>:


char* SegDisp (int timedigit, unsigned long num)	// 10진 정수 ==> 문자열로 FND_4
{
 1f4:	4f 92       	push	r4
 1f6:	5f 92       	push	r5
 1f8:	6f 92       	push	r6
 1fa:	7f 92       	push	r7
 1fc:	8f 92       	push	r8
 1fe:	9f 92       	push	r9
 200:	af 92       	push	r10
 202:	bf 92       	push	r11
 204:	cf 92       	push	r12
 206:	df 92       	push	r13
 208:	ef 92       	push	r14
 20a:	ff 92       	push	r15
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
 210:	cd b7       	in	r28, 0x3d	; 61
 212:	de b7       	in	r29, 0x3e	; 62
 214:	2a 97       	sbiw	r28, 0x0a	; 10
 216:	0f b6       	in	r0, 0x3f	; 63
 218:	f8 94       	cli
 21a:	de bf       	out	0x3e, r29	; 62
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	cd bf       	out	0x3d, r28	; 61
 220:	9a 87       	std	Y+10, r25	; 0x0a
 222:	89 87       	std	Y+9, r24	; 0x09
 224:	4a 01       	movw	r8, r20
 226:	5b 01       	movw	r10, r22
	// 10진 정수 계산
	int n4 = (num / 1000) % 10;	// D
 228:	cb 01       	movw	r24, r22
 22a:	ba 01       	movw	r22, r20
 22c:	28 ee       	ldi	r18, 0xE8	; 232
 22e:	33 e0       	ldi	r19, 0x03	; 3
 230:	40 e0       	ldi	r20, 0x00	; 0
 232:	50 e0       	ldi	r21, 0x00	; 0
 234:	5f d0       	rcall	.+190    	; 0x2f4 <__udivmodsi4>
 236:	0f 2e       	mov	r0, r31
 238:	fa e0       	ldi	r31, 0x0A	; 10
 23a:	cf 2e       	mov	r12, r31
 23c:	d1 2c       	mov	r13, r1
 23e:	e1 2c       	mov	r14, r1
 240:	f1 2c       	mov	r15, r1
 242:	f0 2d       	mov	r31, r0
 244:	ca 01       	movw	r24, r20
 246:	b9 01       	movw	r22, r18
 248:	a7 01       	movw	r20, r14
 24a:	96 01       	movw	r18, r12
 24c:	53 d0       	rcall	.+166    	; 0x2f4 <__udivmodsi4>
 24e:	69 83       	std	Y+1, r22	; 0x01
 250:	7a 83       	std	Y+2, r23	; 0x02
 252:	8b 83       	std	Y+3, r24	; 0x03
 254:	9c 83       	std	Y+4, r25	; 0x04
	int n3 = (num / 100) % 10;	// C
 256:	c5 01       	movw	r24, r10
 258:	b4 01       	movw	r22, r8
 25a:	24 e6       	ldi	r18, 0x64	; 100
 25c:	30 e0       	ldi	r19, 0x00	; 0
 25e:	40 e0       	ldi	r20, 0x00	; 0
 260:	50 e0       	ldi	r21, 0x00	; 0
 262:	48 d0       	rcall	.+144    	; 0x2f4 <__udivmodsi4>
 264:	ca 01       	movw	r24, r20
 266:	b9 01       	movw	r22, r18
 268:	a7 01       	movw	r20, r14
 26a:	96 01       	movw	r18, r12
 26c:	43 d0       	rcall	.+134    	; 0x2f4 <__udivmodsi4>
 26e:	2b 01       	movw	r4, r22
 270:	3c 01       	movw	r6, r24
	int n2 = (num / 10) % 10;	// B
 272:	c5 01       	movw	r24, r10
 274:	b4 01       	movw	r22, r8
 276:	a7 01       	movw	r20, r14
 278:	96 01       	movw	r18, r12
 27a:	3c d0       	rcall	.+120    	; 0x2f4 <__udivmodsi4>
 27c:	6d 83       	std	Y+5, r22	; 0x05
 27e:	7e 83       	std	Y+6, r23	; 0x06
 280:	8f 83       	std	Y+7, r24	; 0x07
 282:	98 87       	std	Y+8, r25	; 0x08
 284:	ca 01       	movw	r24, r20
 286:	b9 01       	movw	r22, r18
 288:	a7 01       	movw	r20, r14
 28a:	96 01       	movw	r18, r12
 28c:	33 d0       	rcall	.+102    	; 0x2f4 <__udivmodsi4>
	//int n3 = (num / 60) % 10;	// C
	//int n2 = (num / 10) % 6;	// B
	//int n1 = num % 10;			// A
		
	// 문자열로 입력
	arr[0] = digit[n1];
 28e:	ed 81       	ldd	r30, Y+5	; 0x05
 290:	fe 81       	ldd	r31, Y+6	; 0x06
 292:	e6 5f       	subi	r30, 0xF6	; 246
 294:	fe 4f       	sbci	r31, 0xFE	; 254
 296:	20 81       	ld	r18, Z
 298:	ea e1       	ldi	r30, 0x1A	; 26
 29a:	f1 e0       	ldi	r31, 0x01	; 1
 29c:	20 83       	st	Z, r18
	arr[1] = digit[n2];// + 0x80; // 소수점 표시
 29e:	db 01       	movw	r26, r22
 2a0:	a6 5f       	subi	r26, 0xF6	; 246
 2a2:	be 4f       	sbci	r27, 0xFE	; 254
 2a4:	8c 91       	ld	r24, X
 2a6:	81 83       	std	Z+1, r24	; 0x01
	arr[2] = digit[n3];// + 0x80; // 소수점 표시
 2a8:	d2 01       	movw	r26, r4
 2aa:	a6 5f       	subi	r26, 0xF6	; 246
 2ac:	be 4f       	sbci	r27, 0xFE	; 254
 2ae:	8c 91       	ld	r24, X
 2b0:	82 83       	std	Z+2, r24	; 0x02
	arr[3] = digit[n4];
 2b2:	a9 81       	ldd	r26, Y+1	; 0x01
 2b4:	ba 81       	ldd	r27, Y+2	; 0x02
 2b6:	a6 5f       	subi	r26, 0xF6	; 246
 2b8:	be 4f       	sbci	r27, 0xFE	; 254
 2ba:	8c 91       	ld	r24, X

	// sm = (num/100) ? ( (num/1000) ? 4 : 3 ) : ( (num/10) ? 2 : 1);	// 출력 자리수 제한 (0이면 표시 안함)
	
	FND_4(timedigit, arr);
 2bc:	83 83       	std	Z+3, r24	; 0x03
 2be:	bf 01       	movw	r22, r30
 2c0:	89 85       	ldd	r24, Y+9	; 0x09
 2c2:	9a 85       	ldd	r25, Y+10	; 0x0a
 2c4:	6e df       	rcall	.-292    	; 0x1a2 <FND_4>
	return arr;
}
 2c6:	8a e1       	ldi	r24, 0x1A	; 26
 2c8:	91 e0       	ldi	r25, 0x01	; 1
 2ca:	2a 96       	adiw	r28, 0x0a	; 10
 2cc:	0f b6       	in	r0, 0x3f	; 63
 2ce:	f8 94       	cli
 2d0:	de bf       	out	0x3e, r29	; 62
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	cd bf       	out	0x3d, r28	; 61
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	ff 90       	pop	r15
 2dc:	ef 90       	pop	r14
 2de:	df 90       	pop	r13
 2e0:	cf 90       	pop	r12
 2e2:	bf 90       	pop	r11
 2e4:	af 90       	pop	r10
 2e6:	9f 90       	pop	r9
 2e8:	8f 90       	pop	r8
 2ea:	7f 90       	pop	r7
 2ec:	6f 90       	pop	r6
 2ee:	5f 90       	pop	r5
 2f0:	4f 90       	pop	r4
 2f2:	08 95       	ret

000002f4 <__udivmodsi4>:
 2f4:	a1 e2       	ldi	r26, 0x21	; 33
 2f6:	1a 2e       	mov	r1, r26
 2f8:	aa 1b       	sub	r26, r26
 2fa:	bb 1b       	sub	r27, r27
 2fc:	fd 01       	movw	r30, r26
 2fe:	0d c0       	rjmp	.+26     	; 0x31a <__udivmodsi4_ep>

00000300 <__udivmodsi4_loop>:
 300:	aa 1f       	adc	r26, r26
 302:	bb 1f       	adc	r27, r27
 304:	ee 1f       	adc	r30, r30
 306:	ff 1f       	adc	r31, r31
 308:	a2 17       	cp	r26, r18
 30a:	b3 07       	cpc	r27, r19
 30c:	e4 07       	cpc	r30, r20
 30e:	f5 07       	cpc	r31, r21
 310:	20 f0       	brcs	.+8      	; 0x31a <__udivmodsi4_ep>
 312:	a2 1b       	sub	r26, r18
 314:	b3 0b       	sbc	r27, r19
 316:	e4 0b       	sbc	r30, r20
 318:	f5 0b       	sbc	r31, r21

0000031a <__udivmodsi4_ep>:
 31a:	66 1f       	adc	r22, r22
 31c:	77 1f       	adc	r23, r23
 31e:	88 1f       	adc	r24, r24
 320:	99 1f       	adc	r25, r25
 322:	1a 94       	dec	r1
 324:	69 f7       	brne	.-38     	; 0x300 <__udivmodsi4_loop>
 326:	60 95       	com	r22
 328:	70 95       	com	r23
 32a:	80 95       	com	r24
 32c:	90 95       	com	r25
 32e:	9b 01       	movw	r18, r22
 330:	ac 01       	movw	r20, r24
 332:	bd 01       	movw	r22, r26
 334:	cf 01       	movw	r24, r30
 336:	08 95       	ret

00000338 <_exit>:
 338:	f8 94       	cli

0000033a <__stop_program>:
 33a:	ff cf       	rjmp	.-2      	; 0x33a <__stop_program>
